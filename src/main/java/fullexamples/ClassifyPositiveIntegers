package fullexamples;

import java.util.stream.*;
import java.util.List;

/*
* Determine if a number is perfect, abundant, or deficient based on Nicomachus' (60 - 120 CE) classification scheme for 
* positive integers.
* The Greek mathematician Nicomachus devised a classification scheme for positive integers, identifying each as 
* belonging uniquely to the categories of perfect, abundant, or deficient based on their aliquot sum. 
* The aliquot sum is defined as the sum of the factors of a number not including the number itself. 
* For example, the aliquot sum of 15 is (1 + 3 + 5) = 9
*
*     Perfect: aliquot sum = number
*         6 is a perfect number because (1 + 2 + 3) = 6
*         28 is a perfect number because (1 + 2 + 4 + 7 + 14) = 28
*     Abundant: aliquot sum > number
*         12 is an abundant number because (1 + 2 + 3 + 4 + 6) = 16
*         24 is an abundant number because (1 + 2 + 3 + 4 + 6 + 8 + 12) = 36
*     Deficient: aliquot sum < number
*         8 is a deficient number because (1 + 2 + 4) = 7
*         Prime numbers are deficient
*/
public class ClassifyPositiveIntegers {

    public enum Classification { PERFECT, ABUNDANT, DEFICIENT };

    private int number;
    private Classification numberType;  

    public NaturalNumber(int number) {
        this.number = number;
        if (number < 1) {
            throw new IllegalArgumentException("You must supply a natural number (positive integer)");
        }
    }

    public Classification getClassification() {

        int aliquotSum = calculateAliquotSum(number);

        if (aliquotSum == number)
            return Classification.PERFECT;  
            
        return numberType = (aliquotSum > number) ? Classification.ABUNDANT : Classification.DEFICIENT;  
    }

    private int calculateAliquotSum(int number) {
      
       List<Integer> factors = IntStream.range(1, number)
            .boxed()    // REQUIRED
            .filter(n -> number % n == 0)
            .collect(Collectors.toList());
        
        return factors.stream()
            .mapToInt(Integer::intValue)
            .sum();
    }
}
